name: Advanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run linting
        run: |
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Run type checking
        run: |
          mypy app/ --ignore-missing-imports
          
      - name: Security scan
        run: |
          bandit -r app/ -f json -o security-report.json
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report
          path: security-report.json

  # Job 2: Unit and Integration Tests
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-type: [unit, integration, performance]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Install Node dependencies
        run: |
          npm install
          
      - name: Set up test database
        run: |
          python -c "
          import sqlite3
          conn = sqlite3.connect('test_opinion_market.db')
          conn.close()
          "
          
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --junitxml=unit-test-results.xml
          
      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          pytest tests/integration/ -v --junitxml=integration-test-results.xml
          
      - name: Run performance tests
        if: matrix.test-type == 'performance'
        run: |
          pytest tests/performance/ -v --junitxml=performance-test-results.xml
          
      - name: Run advanced feature tests
        run: |
          python scripts/run_advanced_tests.py
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            *-test-results.xml
            coverage.xml
            htmlcov/
            
      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Job 3: Advanced Feature Tests
  advanced-features:
    name: Advanced Features Testing
    runs-on: ubuntu-latest
    needs: test-suite
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Test Advanced Analytics Engine
        run: |
          pytest tests/test_advanced_analytics.py -v --junitxml=analytics-test-results.xml
          
      - name: Test Auto-Scaling Manager
        run: |
          pytest tests/test_auto_scaling.py -v --junitxml=scaling-test-results.xml
          
      - name: Test Advanced Dashboard
        run: |
          pytest tests/test_advanced_dashboard.py -v --junitxml=dashboard-test-results.xml
          
      - name: Test Performance Optimizer V2
        run: |
          python -c "
          import asyncio
          from app.core.performance_optimizer_v2 import performance_optimizer_v2
          
          async def test_optimizer():
              await performance_optimizer_v2.start_optimization()
              await asyncio.sleep(2)
              summary = performance_optimizer_v2.get_performance_summary()
              print(f'Performance Score: {summary.get(\"performance_score\", 0)}')
              await performance_optimizer_v2.stop_optimization()
              
          asyncio.run(test_optimizer())
          "
          
      - name: Test Intelligent Alerting System
        run: |
          python -c "
          import asyncio
          from app.core.intelligent_alerting import intelligent_alerting_system
          
          async def test_alerting():
              await intelligent_alerting_system.start_alerting()
              await asyncio.sleep(2)
              summary = intelligent_alerting_system.get_alerting_summary()
              print(f'Alerting Active: {summary.get(\"alerting_active\", False)}')
              await intelligent_alerting_system.stop_alerting()
              
          asyncio.run(test_alerting())
          "
          
      - name: Upload advanced test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: advanced-test-results
          path: |
            *-test-results.xml

  # Job 4: Load Testing
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: test-suite
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust
          
      - name: Start application
        run: |
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 30
          
      - name: Run load tests
        run: |
          locust -f tests/load_test.py --host=http://localhost:8000 --users=100 --spawn-rate=10 --run-time=5m --headless --html=load-test-report.html
          
      - name: Upload load test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: load-test-report.html

  # Job 5: Build and Push Docker Images
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-suite, advanced-features]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/opinion-market
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 6: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f deployment/staging/
          
      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test commands here
          
      - name: Notify deployment
        run: |
          echo "Staging deployment completed successfully!"

  # Job 7: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, load-testing]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: kubectl apply -f deployment/production/
          
      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Add health check commands here
          
      - name: Notify deployment
        run: |
          echo "Production deployment completed successfully!"

  # Job 8: Performance Monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run performance benchmarks
        run: |
          python scripts/benchmark_performance.py
          
      - name: Generate performance report
        run: |
          python scripts/generate_performance_report.py
          
      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.json

  # Job 9: Security Scanning
  security-scanning:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/opinion-market:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 10: Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-suite, advanced-features, build-and-push]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.test-suite.result == 'success' && needs.advanced-features.result == 'success' }}
        run: |
          echo "✅ All tests passed! Pipeline successful."
          
      - name: Notify failure
        if: ${{ needs.test-suite.result == 'failure' || needs.advanced-features.result == 'failure' }}
        run: |
          echo "❌ Tests failed! Please check the logs."
          
      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}