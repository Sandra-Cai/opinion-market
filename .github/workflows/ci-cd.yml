name: Opinion Market CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r app/ -f json -o bandit-report.json || echo "Bandit scan completed with warnings"

      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || echo "Safety check completed with warnings"

  # Code quality and testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run linting
        run: |
          flake8 app/ tests/
          black --check app/ tests/
          isort --check-only app/ tests/
          mypy app/

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          pytest tests/integration/ -v

      - name: Run API tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          pytest tests/api/ -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Build and push Docker image
  build:
    name: Build and Push
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          helm upgrade --install opinion-market-staging ./deployment/helm/opinion-market \
            --namespace opinion-market-staging \
            --create-namespace \
            --set app.image.tag=${{ github.sha }} \
            --set global.environment=staging \
            --set app.config.databaseUrl="${{ secrets.STAGING_DATABASE_URL }}" \
            --set app.config.redisUrl="${{ secrets.STAGING_REDIS_URL }}" \
            --set app.secrets.databasePassword="${{ secrets.STAGING_DATABASE_PASSWORD }}" \
            --set app.secrets.smtpPassword="${{ secrets.STAGING_SMTP_PASSWORD }}" \
            --set app.secrets.jwtSecret="${{ secrets.STAGING_JWT_SECRET }}" \
            --set app.secrets.encryptionKey="${{ secrets.STAGING_ENCRYPTION_KEY }}"

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/opinion-market-api -n opinion-market-staging
          
          # Run basic health checks
          curl -f https://staging-api.opinionmarket.com/health || exit 1

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          helm upgrade --install opinion-market ./deployment/helm/opinion-market \
            --namespace opinion-market \
            --create-namespace \
            --set app.image.tag=${{ github.event.release.tag_name }} \
            --set global.environment=production \
            --set app.config.databaseUrl="${{ secrets.PRODUCTION_DATABASE_URL }}" \
            --set app.config.redisUrl="${{ secrets.PRODUCTION_REDIS_URL }}" \
            --set app.secrets.databasePassword="${{ secrets.PRODUCTION_DATABASE_PASSWORD }}" \
            --set app.secrets.smtpPassword="${{ secrets.PRODUCTION_SMTP_PASSWORD }}" \
            --set app.secrets.jwtSecret="${{ secrets.PRODUCTION_JWT_SECRET }}" \
            --set app.secrets.encryptionKey="${{ secrets.PRODUCTION_ENCRYPTION_KEY }}"

      - name: Run production health checks
        run: |
          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/opinion-market-api -n opinion-market
          
          # Run comprehensive health checks
          curl -f https://api.opinionmarket.com/health || exit 1
          curl -f https://api.opinionmarket.com/ready || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment completed successfully! ðŸš€'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance testing
  performance-test:
    name: Performance Test
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install locust
        run: pip install locust

      - name: Run performance tests
        run: |
          locust -f tests/performance/locustfile.py \
            --host=https://staging-api.opinionmarket.com \
            --users=100 \
            --spawn-rate=10 \
            --run-time=5m \
            --headless \
            --html=performance-report.html

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.html

  # Security compliance check
  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'https://staging-api.opinionmarket.com'

      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Opinion Market'
          path: '.'
          format: 'HTML'
          out: 'reports'

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/

  # Documentation generation
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install sphinx sphinx-rtd-theme

      - name: Generate API documentation
        run: |
          cd docs
          make html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
